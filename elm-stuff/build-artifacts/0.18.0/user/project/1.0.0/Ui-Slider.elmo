var _user$project$Ui_Slider$dataAttr = F2(
	function (key, val) {
		return A2(
			_elm_lang$html$Html_Attributes$attribute,
			A2(_elm_lang$core$Basics_ops['++'], 'data-', key),
			val);
	});
var _user$project$Ui_Slider$hasClass = function ($class) {
	return A2(
		_elm_lang$core$Json_Decode$map,
		function (className) {
			return A2(
				_elm_lang$core$String$contains,
				A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					A2(_elm_lang$core$Basics_ops['++'], $class, ' ')),
				A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					A2(_elm_lang$core$Basics_ops['++'], className, ' ')));
		},
		A2(
			_elm_lang$core$Json_Decode$at,
			{
				ctor: '::',
				_0: 'className',
				_1: {ctor: '[]'}
			},
			_elm_lang$core$Json_Decode$string));
};
var _user$project$Ui_Slider$traverseToContainer = function (decoder) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		function (doesHaveClass) {
			return doesHaveClass ? decoder : _debois$elm_dom$DOM$parentElement(
				_elm_lang$core$Json_Decode$lazy(
					function (_p0) {
						return _user$project$Ui_Slider$traverseToContainer(decoder);
					}));
		},
		_user$project$Ui_Slider$hasClass('mdc-slider'));
};
var _user$project$Ui_Slider$data = F2(
	function (key, decoder) {
		return A2(
			_elm_lang$core$Json_Decode$at,
			{
				ctor: '::',
				_0: 'dataset',
				_1: {
					ctor: '::',
					_0: key,
					_1: {ctor: '[]'}
				}
			},
			decoder);
	});
var _user$project$Ui_Slider$decodeGeometry = A2(
	_elm_lang$core$Json_Decode$andThen,
	function (x) {
		return _debois$elm_dom$DOM$target(
			_user$project$Ui_Slider$traverseToContainer(
				A7(
					_elm_lang$core$Json_Decode$map6,
					F6(
						function (offsetWidth, offsetLeft, discrete, min, max, steps) {
							return {width: offsetWidth, left: offsetLeft, x: x, discrete: discrete, min: min, max: max, steps: steps};
						}),
					_debois$elm_dom$DOM$offsetWidth,
					_debois$elm_dom$DOM$offsetLeft,
					_user$project$Ui_Slider$hasClass('mdc-slider--discrete'),
					A2(
						_user$project$Ui_Slider$data,
						'min',
						A2(
							_elm_lang$core$Json_Decode$map,
							function (_p1) {
								return A2(
									_elm_lang$core$Result$withDefault,
									1,
									_elm_lang$core$String$toFloat(_p1));
							},
							_elm_lang$core$Json_Decode$string)),
					A2(
						_user$project$Ui_Slider$data,
						'max',
						A2(
							_elm_lang$core$Json_Decode$map,
							function (_p2) {
								return A2(
									_elm_lang$core$Result$withDefault,
									1,
									_elm_lang$core$String$toFloat(_p2));
							},
							_elm_lang$core$Json_Decode$string)),
					A2(
						_user$project$Ui_Slider$data,
						'steps',
						A2(
							_elm_lang$core$Json_Decode$map,
							function (_p3) {
								return A2(
									_elm_lang$core$Result$withDefault,
									1,
									_elm_lang$core$String$toInt(_p3));
							},
							_elm_lang$core$Json_Decode$string)))));
	},
	_elm_lang$core$Json_Decode$oneOf(
		{
			ctor: '::',
			_0: A2(
				_elm_lang$core$Json_Decode$at,
				{
					ctor: '::',
					_0: 'pageX',
					_1: {ctor: '[]'}
				},
				_elm_lang$core$Json_Decode$float),
			_1: {
				ctor: '::',
				_0: _elm_lang$core$Json_Decode$succeed(0),
				_1: {ctor: '[]'}
			}
		}));
var _user$project$Ui_Slider$onMouseDown = function (msg) {
	return A3(
		_elm_lang$html$Html_Events$onWithOptions,
		'mousedown',
		{stopPropagation: true, preventDefault: false},
		A2(_elm_lang$core$Json_Decode$map, msg, _user$project$Ui_Slider$decodeGeometry));
};
var _user$project$Ui_Slider$computeValue = function (geometry) {
	var c = (!_elm_lang$core$Native_Utils.eq(geometry.width, 0)) ? ((geometry.x - geometry.left) / geometry.width) : A3(_elm_lang$core$Basics$clamp, 0, 1, 0);
	return A3(_elm_lang$core$Basics$clamp, geometry.min, geometry.max, geometry.min + (c * (geometry.max - geometry.min)));
};
var _user$project$Ui_Slider$discretize = F2(
	function (steps, continuousValue) {
		return _elm_lang$core$Basics$toFloat(
			steps * _elm_lang$core$Basics$round(
				continuousValue / _elm_lang$core$Basics$toFloat(steps)));
	});
var _user$project$Ui_Slider$targetValue = A2(
	_elm_lang$core$Json_Decode$map,
	function (geometry) {
		return A2(
			_user$project$Ui_Slider$discretize,
			geometry.steps,
			_user$project$Ui_Slider$computeValue(geometry));
	},
	_user$project$Ui_Slider$decodeGeometry);
var _user$project$Ui_Slider$view = F2(
	function (model, config) {
		var activateOn_ = function (event) {
			return A3(
				_elm_lang$html$Html_Events$onWithOptions,
				event,
				{stopPropagation: true, preventDefault: false},
				A2(
					_elm_lang$core$Json_Decode$map,
					_user$project$Ui_Internal_Slider$Activate(false),
					_user$project$Ui_Slider$decodeGeometry));
		};
		var leaves = {
			ctor: '::',
			_0: 'mouseleave',
			_1: {
				ctor: '::',
				_0: 'touchleave',
				_1: {
					ctor: '::',
					_0: 'pointerleave',
					_1: {ctor: '[]'}
				}
			}
		};
		var moves = {
			ctor: '::',
			_0: 'mousemove',
			_1: {
				ctor: '::',
				_0: 'touchmove',
				_1: {
					ctor: '::',
					_0: 'pointermove',
					_1: {ctor: '[]'}
				}
			}
		};
		var downs = {
			ctor: '::',
			_0: 'mousedown',
			_1: {
				ctor: '::',
				_0: 'touchstart',
				_1: {
					ctor: '::',
					_0: 'keydown',
					_1: {
						ctor: '::',
						_0: 'pointerdown',
						_1: {ctor: '[]'}
					}
				}
			}
		};
		var ups = {
			ctor: '::',
			_0: 'mouseup',
			_1: {
				ctor: '::',
				_0: 'touchend',
				_1: {
					ctor: '::',
					_0: 'pointerup',
					_1: {ctor: '[]'}
				}
			}
		};
		var initOn = function (event) {
			return A2(
				_elm_lang$html$Html_Events$on,
				event,
				A2(_elm_lang$core$Json_Decode$map, _user$project$Ui_Internal_Slider$Init, _user$project$Ui_Slider$decodeGeometry));
		};
		var activateOn = function (event) {
			return A2(
				_elm_lang$html$Html_Events$on,
				event,
				A2(
					_elm_lang$core$Json_Decode$map,
					_user$project$Ui_Internal_Slider$Activate(true),
					_user$project$Ui_Slider$decodeGeometry));
		};
		var continuousValue = model.active ? A2(_elm_lang$core$Maybe$withDefault, config.value, model.value) : config.value;
		var value = A2(_user$project$Ui_Slider$discretize, config.steps, continuousValue);
		var translateX = function () {
			var v = A3(_elm_lang$core$Basics$clamp, config.min, config.max, value);
			var c = (!_elm_lang$core$Native_Utils.eq(config.max - config.min, 0)) ? A3(_elm_lang$core$Basics$clamp, 0, 1, (v - config.min) / (config.max - config.min)) : 0;
			return A2(
				_elm_lang$core$Maybe$withDefault,
				0,
				A2(
					_elm_lang$core$Maybe$map,
					F2(
						function (x, y) {
							return x * y;
						})(c),
					A2(
						_elm_lang$core$Maybe$map,
						function (_) {
							return _.width;
						},
						model.geometry)));
		}();
		var trackScale = _elm_lang$core$Native_Utils.eq(config.max - config.min, 0) ? 0 : ((value - config.min) / (config.max - config.min));
		return A2(
			_elm_lang$html$Html$div,
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$classList(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'mdc-slider mdc-slider--discrete elm-mdc-slider--uninitialized', _1: true},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'mdc-slider--focus', _1: model.focus},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'mdc-slider--active', _1: model.active},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'mdc-slider--in-transit', _1: model.inTransit},
										_1: {
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'mdc-slider--off',
												_1: _elm_lang$core$Native_Utils.cmp(value, config.min) < 1
											},
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$tabindex(0),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html_Events$on,
								'focus',
								_elm_lang$core$Json_Decode$succeed(_user$project$Ui_Internal_Slider$Focus)),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html_Events$on,
									'blur',
									_elm_lang$core$Json_Decode$succeed(_user$project$Ui_Internal_Slider$Blur)),
								_1: {
									ctor: '::',
									_0: A2(
										_user$project$Ui_Slider$dataAttr,
										'min',
										_elm_lang$core$Basics$toString(config.min)),
									_1: {
										ctor: '::',
										_0: A2(
											_user$project$Ui_Slider$dataAttr,
											'max',
											_elm_lang$core$Basics$toString(config.max)),
										_1: {
											ctor: '::',
											_0: A2(
												_user$project$Ui_Slider$dataAttr,
												'steps',
												_elm_lang$core$Basics$toString(config.steps)),
											_1: {
												ctor: '::',
												_0: initOn('elm-mdc-init'),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				},
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(_elm_lang$core$List$map, activateOn, downs),
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'bottom', _1: '8px'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'height', _1: 'inherit'},
									_1: {ctor: '[]'}
								}
							}),
						_1: {ctor: '[]'}
					})),
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('mdc-slider__track-container'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('mdc-slider__track'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'transform',
												_1: A2(
													_elm_lang$core$Basics_ops['++'],
													'scaleX(',
													A2(
														_elm_lang$core$Basics_ops['++'],
														_elm_lang$core$Basics$toString(trackScale),
														')'))
											},
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('mdc-slider__track-marker-container'),
									_1: {ctor: '[]'}
								},
								A2(
									_elm_lang$core$List$repeat,
									(_elm_lang$core$Basics$round(config.max - config.min) / config.steps) | 0,
									A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('mdc-slider__track-marker'),
											_1: {ctor: '[]'}
										},
										{ctor: '[]'}))),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('mdc-slider__thumb-container'),
							_1: {
								ctor: '::',
								_0: _user$project$Ui_Slider$onMouseDown(
									_user$project$Ui_Internal_Slider$Activate(false)),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {
												ctor: '_Tuple2',
												_0: 'transform',
												_1: A2(
													_elm_lang$core$Basics_ops['++'],
													'translateX(',
													A2(
														_elm_lang$core$Basics_ops['++'],
														_elm_lang$core$Basics$toString(translateX),
														'px) translateX(-50%)'))
											},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'top', _1: '7px'},
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$svg,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$class('mdc-slider__thumb'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$width('21'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$height('21'),
											_1: {ctor: '[]'}
										}
									}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$svg$Svg$circle,
										{
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$cx('10.5'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$cy('10.5'),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$r('7.875'),
													_1: {ctor: '[]'}
												}
											}
										},
										{ctor: '[]'}),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('mdc-slider__focus-ring'),
										_1: {ctor: '[]'}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Ui_Slider$update = F2(
	function (msg, model) {
		var _p4 = msg;
		switch (_p4.ctor) {
			case 'NoOp':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'Input':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'SetValue':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							value: _elm_lang$core$Maybe$Just(_p4._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Focus':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{focus: true}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Blur':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{focus: false, active: false}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Tick':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{inTransit: false}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Activate':
				var _p5 = _p4._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							active: true,
							geometry: _elm_lang$core$Maybe$Just(_p5),
							inTransit: _p4._0,
							value: _elm_lang$core$Maybe$Just(
								_user$project$Ui_Slider$computeValue(_p5))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Init':
				var _p6 = _p4._0;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							geometry: _elm_lang$core$Maybe$Just(_p6),
							value: _elm_lang$core$Maybe$Just(
								_user$project$Ui_Slider$computeValue(_p6)),
							initialized: true
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Up':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'MouseUp':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{active: false}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'MouseDrag':
				var g = A2(_elm_lang$core$Maybe$withDefault, _user$project$Ui_Internal_Slider$defaultGeometry, model.geometry);
				var newGeometry = _elm_lang$core$Native_Utils.update(
					g,
					{
						x: _elm_lang$core$Basics$toFloat(_p4._0.x)
					});
				var value = _elm_lang$core$Maybe$Just(
					_user$project$Ui_Slider$computeValue(newGeometry));
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							geometry: _elm_lang$core$Maybe$Just(newGeometry),
							value: value
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Resize':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{requestAnimation: true}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return model.requestAnimation ? {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{requestAnimation: false, initialized: false}),
					_1: _elm_lang$core$Platform_Cmd$none
				} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$Ui_Slider$defaultModel = {focus: false, active: false, touched: false, geometry: _elm_lang$core$Maybe$Nothing, value: _elm_lang$core$Maybe$Nothing, inTransit: false, initialized: false, requestAnimation: true};
var _user$project$Ui_Slider$subscriptions = function (model) {
	var list = _elm_lang$core$Native_Utils.eq(model.active, true) ? {
		ctor: '::',
		_0: _elm_lang$mouse$Mouse$moves(_user$project$Ui_Internal_Slider$MouseDrag),
		_1: {
			ctor: '::',
			_0: _elm_lang$mouse$Mouse$ups(_user$project$Ui_Internal_Slider$MouseUp),
			_1: {ctor: '[]'}
		}
	} : {ctor: '[]'};
	return _elm_lang$core$Platform_Sub$batch(list);
};
var _user$project$Ui_Slider$defaultConfig = {value: 0, min: 0, max: 20, steps: 5, discrete: false, trackMarkers: false};
var _user$project$Ui_Slider$onInput = _elm_lang$html$Html_Events$on('input');
var _user$project$Ui_Slider$Model = F8(
	function (a, b, c, d, e, f, g, h) {
		return {focus: a, active: b, touched: c, geometry: d, value: e, inTransit: f, initialized: g, requestAnimation: h};
	});
var _user$project$Ui_Slider$Config = F6(
	function (a, b, c, d, e, f) {
		return {value: a, min: b, max: c, discrete: d, steps: e, trackMarkers: f};
	});
