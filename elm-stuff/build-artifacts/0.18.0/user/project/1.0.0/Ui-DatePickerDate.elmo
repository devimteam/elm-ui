var _user$project$Ui_DatePickerDate$yearRange = F2(
	function (_p0, range) {
		var _p1 = _p0;
		var _p5 = _p1.focused;
		var _p4 = _p1.currentMonth;
		var _p2 = range;
		switch (_p2.ctor) {
			case 'MoreOrLess':
				var _p3 = _p2._0;
				return A2(
					_elm_lang$core$List$range,
					_elm_lang$core$Date$year(_p4) - _p3,
					_elm_lang$core$Date$year(_p4) + _p3);
			case 'Between':
				return A2(_elm_lang$core$List$range, _p2._0, _p2._1);
			case 'From':
				return A2(
					_elm_lang$core$List$range,
					_p2._0,
					_elm_lang$core$Date$year(_p5));
			case 'To':
				return A2(
					_elm_lang$core$List$range,
					_elm_lang$core$Date$year(_p5),
					_p2._0);
			default:
				return {ctor: '[]'};
		}
	});
var _user$project$Ui_DatePickerDate$unsafeDate = function (date) {
	var _p6 = _elm_lang$core$Date$fromString(date);
	if (_p6.ctor === 'Err') {
		return _elm_lang$core$Native_Utils.crashCase(
			'Ui.DatePickerDate',
			{
				start: {line: 687, column: 5},
				end: {line: 692, column: 17}
			},
			_p6)(
			A2(_elm_lang$core$Basics_ops['++'], 'unsafeDate: failed to parse date:', _p6._0));
	} else {
		return _p6._0;
	}
};
var _user$project$Ui_DatePickerDate$isLeapYear = function (y) {
	return _elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], y, 400),
		0) || ((!_elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], y, 100),
		0)) && _elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], y, 4),
		0));
};
var _user$project$Ui_DatePickerDate$daysInMonth = F2(
	function (year, month) {
		var _p8 = month;
		switch (_p8.ctor) {
			case 'Jan':
				return 31;
			case 'Feb':
				return _user$project$Ui_DatePickerDate$isLeapYear(year) ? 29 : 28;
			case 'Mar':
				return 31;
			case 'Apr':
				return 30;
			case 'May':
				return 31;
			case 'Jun':
				return 30;
			case 'Jul':
				return 31;
			case 'Aug':
				return 31;
			case 'Sep':
				return 30;
			case 'Oct':
				return 31;
			case 'Nov':
				return 30;
			default:
				return 31;
		}
	});
var _user$project$Ui_DatePickerDate$monthFromInt = function (month) {
	var _p9 = month;
	switch (_p9) {
		case 1:
			return _elm_lang$core$Date$Jan;
		case 2:
			return _elm_lang$core$Date$Feb;
		case 3:
			return _elm_lang$core$Date$Mar;
		case 4:
			return _elm_lang$core$Date$Apr;
		case 5:
			return _elm_lang$core$Date$May;
		case 6:
			return _elm_lang$core$Date$Jun;
		case 7:
			return _elm_lang$core$Date$Jul;
		case 8:
			return _elm_lang$core$Date$Aug;
		case 9:
			return _elm_lang$core$Date$Sep;
		case 10:
			return _elm_lang$core$Date$Oct;
		case 11:
			return _elm_lang$core$Date$Nov;
		case 12:
			return _elm_lang$core$Date$Dec;
		default:
			return _elm_lang$core$Native_Utils.crashCase(
				'Ui.DatePickerDate',
				{
					start: {line: 586, column: 5},
					end: {line: 624, column: 72}
				},
				_p9)(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'monthFromInt: invalid month: ',
					_elm_lang$core$Basics$toString(_p9)));
	}
};
var _user$project$Ui_DatePickerDate$monthToInt = function (month) {
	var _p11 = month;
	switch (_p11.ctor) {
		case 'Jan':
			return 1;
		case 'Feb':
			return 2;
		case 'Mar':
			return 3;
		case 'Apr':
			return 4;
		case 'May':
			return 5;
		case 'Jun':
			return 6;
		case 'Jul':
			return 7;
		case 'Aug':
			return 8;
		case 'Sep':
			return 9;
		case 'Oct':
			return 10;
		case 'Nov':
			return 11;
		default:
			return 12;
	}
};
var _user$project$Ui_DatePickerDate$succMonth = function (month) {
	return _user$project$Ui_DatePickerDate$monthFromInt(
		A2(
			F2(
				function (x, y) {
					return x + y;
				}),
			1,
			A3(
				_elm_lang$core$Basics$flip,
				_elm_lang$core$Basics$rem,
				12,
				_user$project$Ui_DatePickerDate$monthToInt(month))));
};
var _user$project$Ui_DatePickerDate$predMonth = function (month) {
	var prev = A3(
		_elm_lang$core$Basics$flip,
		_elm_lang$core$Basics$rem,
		12,
		_user$project$Ui_DatePickerDate$monthToInt(month) - 1);
	return _elm_lang$core$Native_Utils.eq(prev, 0) ? _elm_lang$core$Date$Dec : _user$project$Ui_DatePickerDate$monthFromInt(prev);
};
var _user$project$Ui_DatePickerDate$monthToString = function (month) {
	var $int = _user$project$Ui_DatePickerDate$monthToInt(month);
	return (_elm_lang$core$Native_Utils.cmp($int, 10) < 0) ? A2(
		_elm_lang$core$Basics_ops['++'],
		'0',
		_elm_lang$core$Basics$toString($int)) : _elm_lang$core$Basics$toString($int);
};
var _user$project$Ui_DatePickerDate$dayFromInt = function (day) {
	var _p12 = day;
	switch (_p12) {
		case 1:
			return _elm_lang$core$Date$Mon;
		case 2:
			return _elm_lang$core$Date$Tue;
		case 3:
			return _elm_lang$core$Date$Wed;
		case 4:
			return _elm_lang$core$Date$Thu;
		case 5:
			return _elm_lang$core$Date$Fri;
		case 6:
			return _elm_lang$core$Date$Sat;
		case 7:
			return _elm_lang$core$Date$Sun;
		default:
			return _elm_lang$core$Native_Utils.crashCase(
				'Ui.DatePickerDate',
				{
					start: {line: 485, column: 5},
					end: {line: 508, column: 70}
				},
				_p12)(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'dayFromInt: invalid day: ',
					_elm_lang$core$Basics$toString(day)));
	}
};
var _user$project$Ui_DatePickerDate$dayToInt = function (day) {
	var _p14 = day;
	switch (_p14.ctor) {
		case 'Mon':
			return 1;
		case 'Tue':
			return 2;
		case 'Wed':
			return 3;
		case 'Thu':
			return 4;
		case 'Fri':
			return 5;
		case 'Sat':
			return 6;
		default:
			return 7;
	}
};
var _user$project$Ui_DatePickerDate$dayToString = function (day) {
	return (_elm_lang$core$Native_Utils.cmp(day, 10) < 0) ? A2(
		_elm_lang$core$Basics_ops['++'],
		'0',
		_elm_lang$core$Basics$toString(day)) : _elm_lang$core$Basics$toString(day);
};
var _user$project$Ui_DatePickerDate$mkDate = F3(
	function (year, month, day) {
		return _user$project$Ui_DatePickerDate$unsafeDate(
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(year),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'/',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$Ui_DatePickerDate$monthToString(month),
						A2(
							_elm_lang$core$Basics_ops['++'],
							'/',
							_user$project$Ui_DatePickerDate$dayToString(day))))));
	});
var _user$project$Ui_DatePickerDate$newYear = F2(
	function (currentMonth, newYear) {
		var _p15 = _elm_lang$core$String$toInt(newYear);
		if (_p15.ctor === 'Ok') {
			return A3(
				_user$project$Ui_DatePickerDate$mkDate,
				_p15._0,
				_elm_lang$core$Date$month(currentMonth),
				_elm_lang$core$Date$day(currentMonth));
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'Ui.DatePickerDate',
				{
					start: {line: 697, column: 5},
					end: {line: 702, column: 70}
				},
				_p15)(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Unknown Month ',
					_elm_lang$core$Basics$toString(currentMonth)));
		}
	});
var _user$project$Ui_DatePickerDate$predDow = function (day) {
	var prev = A3(
		_elm_lang$core$Basics$flip,
		_elm_lang$core$Basics$rem,
		7,
		_user$project$Ui_DatePickerDate$dayToInt(day) - 1);
	return _elm_lang$core$Native_Utils.eq(prev, 0) ? _elm_lang$core$Date$Sun : _user$project$Ui_DatePickerDate$dayFromInt(prev);
};
var _user$project$Ui_DatePickerDate$succDow = function (day) {
	return _user$project$Ui_DatePickerDate$dayFromInt(
		A2(
			F2(
				function (x, y) {
					return x + y;
				}),
			1,
			A3(
				_elm_lang$core$Basics$flip,
				_elm_lang$core$Basics$rem,
				7,
				_user$project$Ui_DatePickerDate$dayToInt(day))));
};
var _user$project$Ui_DatePickerDate$subDay = function (date) {
	var day = _elm_lang$core$Date$day(date) - 1;
	var year = _elm_lang$core$Date$year(date);
	var month = _elm_lang$core$Date$month(date);
	var pred = _user$project$Ui_DatePickerDate$predMonth(month);
	var predYear = _elm_lang$core$Native_Utils.eq(pred, _elm_lang$core$Date$Dec) ? (year - 1) : year;
	return (_elm_lang$core$Native_Utils.cmp(day, 1) < 0) ? A3(
		_user$project$Ui_DatePickerDate$mkDate,
		predYear,
		pred,
		A2(_user$project$Ui_DatePickerDate$daysInMonth, predYear, pred)) : A3(_user$project$Ui_DatePickerDate$mkDate, year, month, day);
};
var _user$project$Ui_DatePickerDate$addDay = function (date) {
	var day = _elm_lang$core$Date$day(date) + 1;
	var year = _elm_lang$core$Date$year(date);
	var month = _elm_lang$core$Date$month(date);
	var dim = A2(_user$project$Ui_DatePickerDate$daysInMonth, year, month);
	var succ = _user$project$Ui_DatePickerDate$succMonth(month);
	var succYear = _elm_lang$core$Native_Utils.eq(succ, _elm_lang$core$Date$Jan) ? (year + 1) : year;
	return (_elm_lang$core$Native_Utils.cmp(day, dim) > 0) ? A3(_user$project$Ui_DatePickerDate$mkDate, succYear, succ, 1) : A3(_user$project$Ui_DatePickerDate$mkDate, year, month, day);
};
var _user$project$Ui_DatePickerDate$prevMonth = function (date) {
	var prevMonth = _user$project$Ui_DatePickerDate$predMonth(
		_elm_lang$core$Date$month(date));
	var prevYear = _elm_lang$core$Native_Utils.eq(prevMonth, _elm_lang$core$Date$Dec) ? (_elm_lang$core$Date$year(date) - 1) : _elm_lang$core$Date$year(date);
	return A3(_user$project$Ui_DatePickerDate$mkDate, prevYear, prevMonth, 1);
};
var _user$project$Ui_DatePickerDate$nextMonth = function (date) {
	var nextMonth = _user$project$Ui_DatePickerDate$succMonth(
		_elm_lang$core$Date$month(date));
	var nextYear = _elm_lang$core$Native_Utils.eq(nextMonth, _elm_lang$core$Date$Jan) ? (_elm_lang$core$Date$year(date) + 1) : _elm_lang$core$Date$year(date);
	return A3(_user$project$Ui_DatePickerDate$mkDate, nextYear, nextMonth, 1);
};
var _user$project$Ui_DatePickerDate$firstOfMonth = function (date) {
	return A3(
		_user$project$Ui_DatePickerDate$mkDate,
		_elm_lang$core$Date$year(date),
		_elm_lang$core$Date$month(date),
		1);
};
var _user$project$Ui_DatePickerDate$repeat = function (f) {
	var go = F2(
		function (n, x) {
			go:
			while (true) {
				if (_elm_lang$core$Native_Utils.eq(n, 0)) {
					return x;
				} else {
					var _v9 = n - 1,
						_v10 = f(x);
					n = _v9;
					x = _v10;
					continue go;
				}
			}
		});
	return go;
};
var _user$project$Ui_DatePickerDate$addDays = _user$project$Ui_DatePickerDate$repeat(_user$project$Ui_DatePickerDate$addDay);
var _user$project$Ui_DatePickerDate$subDays = _user$project$Ui_DatePickerDate$repeat(_user$project$Ui_DatePickerDate$subDay);
var _user$project$Ui_DatePickerDate$addDows = _user$project$Ui_DatePickerDate$repeat(_user$project$Ui_DatePickerDate$succDow);
var _user$project$Ui_DatePickerDate$subDows = _user$project$Ui_DatePickerDate$repeat(_user$project$Ui_DatePickerDate$succDow);
var _user$project$Ui_DatePickerDate$dateTuple = function (date) {
	return {
		ctor: '_Tuple3',
		_0: _elm_lang$core$Date$year(date),
		_1: _user$project$Ui_DatePickerDate$monthToInt(
			_elm_lang$core$Date$month(date)),
		_2: _elm_lang$core$Date$day(date)
	};
};
var _user$project$Ui_DatePickerDate$trimDates = F2(
	function (firstDay, dates) {
		var dl = function (dates) {
			dl:
			while (true) {
				var _p17 = dates;
				if (_p17.ctor === '[]') {
					return {ctor: '[]'};
				} else {
					if (_elm_lang$core$Native_Utils.eq(
						_elm_lang$core$Date$dayOfWeek(_p17._0),
						firstDay)) {
						return dates;
					} else {
						var _v12 = _p17._1;
						dates = _v12;
						continue dl;
					}
				}
			}
		};
		var lastDay = _user$project$Ui_DatePickerDate$predDow(firstDay);
		var dr = function (dates) {
			dr:
			while (true) {
				var _p18 = dates;
				if (_p18.ctor === '[]') {
					return {ctor: '[]'};
				} else {
					if (_elm_lang$core$Native_Utils.eq(
						_elm_lang$core$Date$dayOfWeek(_p18._0),
						lastDay)) {
						return dates;
					} else {
						var _v14 = _p18._1;
						dates = _v14;
						continue dr;
					}
				}
			}
		};
		return _elm_lang$core$List$reverse(
			dr(
				_elm_lang$core$List$reverse(
					dl(dates))));
	});
var _user$project$Ui_DatePickerDate$datesInRange = F3(
	function (firstDay, min, max) {
		var go = F2(
			function (x, acc) {
				go:
				while (true) {
					var y = _user$project$Ui_DatePickerDate$subDay(x);
					if (_elm_lang$core$Native_Utils.eq(
						_user$project$Ui_DatePickerDate$dateTuple(y),
						_user$project$Ui_DatePickerDate$dateTuple(min))) {
						return {ctor: '::', _0: y, _1: acc};
					} else {
						var _v15 = y,
							_v16 = {ctor: '::', _0: y, _1: acc};
						x = _v15;
						acc = _v16;
						continue go;
					}
				}
			});
		return A2(
			_user$project$Ui_DatePickerDate$trimDates,
			firstDay,
			A2(
				go,
				max,
				{ctor: '[]'}));
	});
var _user$project$Ui_DatePickerDate$formatMonth = function (month) {
	var _p19 = month;
	switch (_p19.ctor) {
		case 'Jan':
			return 'Январь';
		case 'Feb':
			return 'Февраль';
		case 'Mar':
			return 'Март';
		case 'Apr':
			return 'Апрель';
		case 'May':
			return 'Май';
		case 'Jun':
			return 'Июнь';
		case 'Jul':
			return 'Июль';
		case 'Aug':
			return 'Август';
		case 'Sep':
			return 'Сентябрь';
		case 'Oct':
			return 'Октябрь';
		case 'Nov':
			return 'Ноябрь';
		default:
			return 'Декабрь';
	}
};
var _user$project$Ui_DatePickerDate$formatMonth1 = function (month) {
	var _p20 = month;
	switch (_p20.ctor) {
		case 'Jan':
			return 'янв';
		case 'Feb':
			return 'фев';
		case 'Mar':
			return 'мар';
		case 'Apr':
			return 'апр';
		case 'May':
			return 'май';
		case 'Jun':
			return 'июн';
		case 'Jul':
			return 'июл';
		case 'Aug':
			return 'авг';
		case 'Sep':
			return 'сент';
		case 'Oct':
			return 'окт';
		case 'Nov':
			return 'ноя';
		default:
			return 'дек';
	}
};
var _user$project$Ui_DatePickerDate$formatMonth2 = function (month) {
	var _p21 = month;
	switch (_p21.ctor) {
		case 'Jan':
			return 'января';
		case 'Feb':
			return 'февраля';
		case 'Mar':
			return 'марта';
		case 'Apr':
			return 'апреля';
		case 'May':
			return 'мая';
		case 'Jun':
			return 'июня';
		case 'Jul':
			return 'июля';
		case 'Aug':
			return 'августа';
		case 'Sep':
			return 'сентября';
		case 'Oct':
			return 'октября';
		case 'Nov':
			return 'ноября';
		default:
			return 'декабря';
	}
};
var _user$project$Ui_DatePickerDate$formatDay = function (day) {
	var _p22 = day;
	switch (_p22.ctor) {
		case 'Mon':
			return 'Пн';
		case 'Tue':
			return 'Вт';
		case 'Wed':
			return 'Ср';
		case 'Thu':
			return 'Чт';
		case 'Fri':
			return 'Пт';
		case 'Sat':
			return 'Сб';
		default:
			return 'Вск';
	}
};
var _user$project$Ui_DatePickerDate$formatCalendarHeaderDate = function (date) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_user$project$Ui_DatePickerDate$formatDay(
			_elm_lang$core$Date$dayOfWeek(date)),
		A2(
			_elm_lang$core$Basics_ops['++'],
			', ',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Ui_DatePickerDate$dayToString(
					_elm_lang$core$Date$day(date)),
				A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_user$project$Ui_DatePickerDate$formatMonth1(
							_elm_lang$core$Date$month(date)),
						'.')))));
};
var _user$project$Ui_DatePickerDate$formatDateMonthFullName = function (date) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_user$project$Ui_DatePickerDate$dayToString(
			_elm_lang$core$Date$day(date)),
		A2(
			_elm_lang$core$Basics_ops['++'],
			' ',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Ui_DatePickerDate$formatMonth2(
					_elm_lang$core$Date$month(date)),
				A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					_elm_lang$core$Basics$toString(
						_elm_lang$core$Date$year(date))))));
};
var _user$project$Ui_DatePickerDate$formatDate = function (date) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_user$project$Ui_DatePickerDate$dayToString(
			_elm_lang$core$Date$day(date)),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'.',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_user$project$Ui_DatePickerDate$monthToString(
					_elm_lang$core$Date$month(date)),
				A2(
					_elm_lang$core$Basics_ops['++'],
					'.',
					_elm_lang$core$Basics$toString(
						_elm_lang$core$Date$year(date))))));
};
var _user$project$Ui_DatePickerDate$initDate = A3(_user$project$Ui_DatePickerDate$mkDate, 1992, _elm_lang$core$Date$May, 29);
var _user$project$Ui_DatePickerDate$distruct = function (text) {
	var year = function (_p23) {
		return A2(
			_elm_lang$core$String$left,
			4,
			A2(_elm_lang$core$String$dropLeft, 4, _p23));
	}(text);
	var month = function (_p24) {
		return A2(
			_elm_lang$core$String$left,
			2,
			A2(_elm_lang$core$String$dropLeft, 2, _p24));
	}(text);
	var day = A2(_elm_lang$core$String$left, 2, text);
	var addDot = function (d) {
		return (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$String$length(d),
			1) > 0) ? A2(_elm_lang$core$Basics_ops['++'], d, '.') : d;
	};
	return {
		ctor: '_Tuple3',
		_0: addDot(day),
		_1: addDot(month),
		_2: year
	};
};
var _user$project$Ui_DatePickerDate$fromString = function (text_) {
	var parsed = function (_p25) {
		var _p26 = _p25;
		return A2(
			_elm_lang$core$Basics_ops['++'],
			_p26._1,
			A2(_elm_lang$core$Basics_ops['++'], _p26._0, _p26._2));
	};
	var numerize = A3(
		_elm_lang$core$Regex$replace,
		_elm_lang$core$Regex$All,
		_elm_lang$core$Regex$regex('[^0-9]'),
		function (_p27) {
			return '';
		});
	var text = numerize(text_);
	return _elm_lang$core$Date$fromString(
		parsed(
			_user$project$Ui_DatePickerDate$distruct(text)));
};
var _user$project$Ui_DatePickerDate$To = function (a) {
	return {ctor: 'To', _0: a};
};
var _user$project$Ui_DatePickerDate$From = function (a) {
	return {ctor: 'From', _0: a};
};
var _user$project$Ui_DatePickerDate$Between = F2(
	function (a, b) {
		return {ctor: 'Between', _0: a, _1: b};
	});
var _user$project$Ui_DatePickerDate$MoreOrLess = function (a) {
	return {ctor: 'MoreOrLess', _0: a};
};
var _user$project$Ui_DatePickerDate$Off = {ctor: 'Off'};
