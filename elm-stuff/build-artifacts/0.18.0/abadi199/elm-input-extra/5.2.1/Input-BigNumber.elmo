var _abadi199$elm_input_extra$Input_BigNumber$exceedMaxLength = F2(
	function (options, value) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			false,
			A2(
				_elm_lang$core$Maybe$map,
				_elm_lang$core$Basics$not,
				A2(
					_elm_lang$core$Maybe$map,
					function (maxLength) {
						return _elm_lang$core$Native_Utils.cmp(
							maxLength,
							_elm_lang$core$String$length(value)) > -1;
					},
					options.maxLength)));
	});
var _abadi199$elm_input_extra$Input_BigNumber$onChange = function (options) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'change',
		A2(_elm_lang$core$Json_Decode$map, options.onInput, _elm_lang$html$Html_Events$targetValue));
};
var _abadi199$elm_input_extra$Input_BigNumber$isValid = F2(
	function (newValue, options) {
		var updatedNumber = _elm_lang$core$Result$toMaybe(
			_elm_lang$core$String$toInt(newValue));
		return !A2(_abadi199$elm_input_extra$Input_BigNumber$exceedMaxLength, options, newValue);
	});
var _abadi199$elm_input_extra$Input_BigNumber$onKeyDown = F2(
	function (options, currentValue) {
		var isNumber = function (keyCode) {
			return (_elm_lang$core$Native_Utils.cmp(keyCode, 48) > -1) && (_elm_lang$core$Native_Utils.cmp(keyCode, 57) < 1);
		};
		var isNumPad = function (keyCode) {
			return (_elm_lang$core$Native_Utils.cmp(keyCode, 96) > -1) && (_elm_lang$core$Native_Utils.cmp(keyCode, 105) < 1);
		};
		var newValue = function (keyCode) {
			return A2(
				F2(
					function (x, y) {
						return A2(_elm_lang$core$Basics_ops['++'], x, y);
					}),
				currentValue,
				_elm_lang$core$String$fromChar(
					_elm_lang$core$Char$fromCode(keyCode)));
		};
		var filterKey = function (event) {
			return (event.ctrlKey || (event.altKey || event.metaKey)) ? _elm_lang$core$Json_Decode$fail('modifier key is pressed') : (A2(
				_elm_lang$core$List$any,
				F2(
					function (x, y) {
						return _elm_lang$core$Native_Utils.eq(x, y);
					})(event.keyCode),
				_abadi199$elm_input_extra$Input_KeyCode$allowedKeyCodes) ? _elm_lang$core$Json_Decode$fail('allowedKeys') : (((isNumber(event.keyCode) || isNumPad(event.keyCode)) && A2(
				_abadi199$elm_input_extra$Input_BigNumber$isValid,
				newValue(event.keyCode),
				options)) ? _elm_lang$core$Json_Decode$fail('numeric') : _elm_lang$core$Json_Decode$succeed(event.keyCode)));
		};
		var decoder = A2(
			_elm_lang$core$Json_Decode$map,
			function (_p0) {
				return options.onInput(currentValue);
			},
			A2(_elm_lang$core$Json_Decode$andThen, filterKey, _abadi199$elm_input_extra$Input_Decoder$eventDecoder));
		var eventOptions = {stopPropagation: false, preventDefault: true};
		return A3(_elm_lang$html$Html_Events$onWithOptions, 'keydown', eventOptions, decoder);
	});
var _abadi199$elm_input_extra$Input_BigNumber$filterNonDigit = function (value) {
	return _elm_lang$core$String$fromList(
		A2(
			_elm_lang$core$List$filter,
			_elm_lang$core$Char$isDigit,
			_elm_lang$core$String$toList(value)));
};
var _abadi199$elm_input_extra$Input_BigNumber$input = F3(
	function (options, attributes, currentValue) {
		var toArray = A2(
			_elm_lang$core$Basics$flip,
			F2(
				function (x, y) {
					return {ctor: '::', _0: x, _1: y};
				}),
			{ctor: '[]'});
		var onFocusAttribute = A2(
			_elm_lang$core$Maybe$withDefault,
			{ctor: '[]'},
			A2(
				_elm_lang$core$Maybe$map,
				toArray,
				A2(
					_elm_lang$core$Maybe$map,
					_elm_lang$html$Html_Events$onFocus,
					A2(
						_elm_lang$core$Maybe$map,
						function (f) {
							return f(true);
						},
						options.hasFocus))));
		var onBlurAttribute = A2(
			_elm_lang$core$Maybe$withDefault,
			{ctor: '[]'},
			A2(
				_elm_lang$core$Maybe$map,
				toArray,
				A2(
					_elm_lang$core$Maybe$map,
					_elm_lang$html$Html_Events$onBlur,
					A2(
						_elm_lang$core$Maybe$map,
						function (f) {
							return f(false);
						},
						options.hasFocus))));
		return A2(
			_elm_lang$html$Html$input,
			A2(
				_elm_lang$core$List$append,
				onBlurAttribute,
				A2(
					_elm_lang$core$List$append,
					onFocusAttribute,
					A2(
						_elm_lang$core$List$append,
						attributes,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$value(currentValue),
							_1: {
								ctor: '::',
								_0: A2(_abadi199$elm_input_extra$Input_BigNumber$onKeyDown, options, currentValue),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onInput(options.onInput),
									_1: {
										ctor: '::',
										_0: _abadi199$elm_input_extra$Input_BigNumber$onChange(options),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$type_('number'),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}))),
			{ctor: '[]'});
	});
var _abadi199$elm_input_extra$Input_BigNumber$defaultOptions = function (onInput) {
	return {onInput: onInput, maxLength: _elm_lang$core$Maybe$Nothing, hasFocus: _elm_lang$core$Maybe$Nothing};
};
var _abadi199$elm_input_extra$Input_BigNumber$Options = F3(
	function (a, b, c) {
		return {maxLength: a, onInput: b, hasFocus: c};
	});
