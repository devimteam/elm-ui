var _abadi199$elm_input_extra$Input_Text$isValid = F2(
	function (value, options) {
		var exceedMaxLength = A2(
			_elm_lang$core$Maybe$withDefault,
			false,
			A2(
				_elm_lang$core$Maybe$map,
				_elm_lang$core$Basics$not,
				A2(
					_elm_lang$core$Maybe$map,
					F2(
						function (x, y) {
							return _elm_lang$core$Native_Utils.cmp(x, y) < 1;
						})(
						_elm_lang$core$String$length(value)),
					options.maxLength)));
		return !exceedMaxLength;
	});
var _abadi199$elm_input_extra$Input_Text$onKeyDown = F3(
	function (options, currentValue, tagger) {
		var filterKey = function (event) {
			var newValue = A2(
				_elm_lang$core$Basics_ops['++'],
				currentValue,
				_elm_lang$core$String$fromChar(
					_elm_lang$core$Char$fromCode(event.keyCode)));
			return (event.ctrlKey || event.altKey) ? _elm_lang$core$Json_Decode$fail('modifier key is pressed') : (A2(
				_elm_lang$core$List$any,
				F2(
					function (x, y) {
						return _elm_lang$core$Native_Utils.eq(x, y);
					})(event.keyCode),
				_abadi199$elm_input_extra$Input_KeyCode$allowedKeyCodes) ? _elm_lang$core$Json_Decode$fail('not arrow') : (A2(_abadi199$elm_input_extra$Input_Text$isValid, newValue, options) ? _elm_lang$core$Json_Decode$fail('valid') : _elm_lang$core$Json_Decode$succeed(event.keyCode)));
		};
		var decoder = A2(
			_elm_lang$core$Json_Decode$map,
			function (_p0) {
				return tagger(currentValue);
			},
			A2(_elm_lang$core$Json_Decode$andThen, filterKey, _abadi199$elm_input_extra$Input_Decoder$eventDecoder));
		var eventOptions = {stopPropagation: false, preventDefault: true};
		return A3(_elm_lang$html$Html_Events$onWithOptions, 'keydown', eventOptions, decoder);
	});
var _abadi199$elm_input_extra$Input_Text$input = F3(
	function (options, attributes, currentValue) {
		var onBlurAttribute = A2(
			_elm_lang$core$Maybe$withDefault,
			{ctor: '[]'},
			A2(
				_elm_lang$core$Maybe$map,
				A2(
					_elm_lang$core$Basics$flip,
					F2(
						function (x, y) {
							return {ctor: '::', _0: x, _1: y};
						}),
					{ctor: '[]'}),
				A2(
					_elm_lang$core$Maybe$map,
					_elm_lang$html$Html_Events$onBlur,
					A2(
						_elm_lang$core$Maybe$map,
						function (f) {
							return f(false);
						},
						options.hasFocus))));
		var onFocusAttribute = A2(
			_elm_lang$core$Maybe$withDefault,
			{ctor: '[]'},
			A2(
				_elm_lang$core$Maybe$map,
				A2(
					_elm_lang$core$Basics$flip,
					F2(
						function (x, y) {
							return {ctor: '::', _0: x, _1: y};
						}),
					{ctor: '[]'}),
				A2(
					_elm_lang$core$Maybe$map,
					_elm_lang$html$Html_Events$onFocus,
					A2(
						_elm_lang$core$Maybe$map,
						function (f) {
							return f(true);
						},
						options.hasFocus))));
		return A2(
			_elm_lang$html$Html$input,
			A2(
				_elm_lang$core$List$append,
				onBlurAttribute,
				A2(
					_elm_lang$core$List$append,
					onFocusAttribute,
					A2(
						_elm_lang$core$List$append,
						attributes,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$value(currentValue),
							_1: {
								ctor: '::',
								_0: A3(_abadi199$elm_input_extra$Input_Text$onKeyDown, options, currentValue, options.onInput),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onInput(options.onInput),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$type_(options.type_),
										_1: {ctor: '[]'}
									}
								}
							}
						}))),
			{ctor: '[]'});
	});
var _abadi199$elm_input_extra$Input_Text$defaultOptions = function (onInput) {
	return {maxLength: _elm_lang$core$Maybe$Nothing, onInput: onInput, hasFocus: _elm_lang$core$Maybe$Nothing, type_: 'text'};
};
var _abadi199$elm_input_extra$Input_Text$Options = F4(
	function (a, b, c, d) {
		return {maxLength: a, onInput: b, hasFocus: c, type_: d};
	});
