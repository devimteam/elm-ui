var _abadi199$elm_input_extra$Diff$tokenizeLines = function (s) {
	var tokens = A2(_elm_lang$core$String$split, '\n', s);
	var n = _elm_lang$core$List$length(tokens);
	return _elm_lang$core$Native_Utils.eq(s, '') ? {ctor: '[]'} : A2(
		_elm_lang$core$List$indexedMap,
		F2(
			function (i, s) {
				return (_elm_lang$core$Native_Utils.cmp(i, n - 1) < 0) ? A2(_elm_lang$core$Basics_ops['++'], s, '\n') : s;
			}),
		tokens);
};
var _abadi199$elm_input_extra$Diff$val = F3(
	function (row, col, s) {
		return A2(
			_elm_lang$core$Dict$get,
			{ctor: '_Tuple2', _0: row, _1: col},
			s);
	});
var _abadi199$elm_input_extra$Diff$orCrash = function (m) {
	var _p0 = m;
	if (_p0.ctor === 'Just') {
		return _p0._0;
	} else {
		return _elm_lang$core$Native_Utils.crashCase(
			'Diff',
			{
				start: {line: 117, column: 5},
				end: {line: 122, column: 37}
			},
			_p0)('No options');
	}
};
var _abadi199$elm_input_extra$Diff$bestScore = F2(
	function (ma, mb) {
		var _p2 = {ctor: '_Tuple2', _0: ma, _1: mb};
		if (_p2._1.ctor === 'Nothing') {
			return _p2._0;
		} else {
			if (_p2._0.ctor === 'Nothing') {
				return _p2._1;
			} else {
				var _p4 = _p2._1._0._0;
				var _p3 = _p2._0._0._0;
				return (_elm_lang$core$Native_Utils.cmp(_p4, _p3) > 0) ? _elm_lang$core$Maybe$Just(
					{ctor: '_Tuple2', _0: _p4, _1: _p2._1._0._1}) : _elm_lang$core$Maybe$Just(
					{ctor: '_Tuple2', _0: _p3, _1: _p2._0._0._1});
			}
		}
	});
var _abadi199$elm_input_extra$Diff$score = F3(
	function (add, c, _p5) {
		var _p6 = _p5;
		return {
			ctor: '_Tuple2',
			_0: _p6._0 + add,
			_1: {ctor: '::', _0: c, _1: _p6._1}
		};
	});
var _abadi199$elm_input_extra$Diff$scores = F4(
	function (tl, t, l, _p7) {
		var _p8 = _p7;
		return A2(
			_elm_lang$core$Maybe$map,
			A2(_abadi199$elm_input_extra$Diff$score, _p8._1, _p8._2),
			function () {
				var _p9 = _p8._0;
				switch (_p9.ctor) {
					case 'UseA':
						return t;
					case 'UseB':
						return l;
					default:
						return tl;
				}
			}());
	});
var _abadi199$elm_input_extra$Diff$Removed = function (a) {
	return {ctor: 'Removed', _0: a};
};
var _abadi199$elm_input_extra$Diff$Added = function (a) {
	return {ctor: 'Added', _0: a};
};
var _abadi199$elm_input_extra$Diff$Changed = F2(
	function (a, b) {
		return {ctor: 'Changed', _0: a, _1: b};
	});
var _abadi199$elm_input_extra$Diff$NoChange = function (a) {
	return {ctor: 'NoChange', _0: a};
};
var _abadi199$elm_input_extra$Diff$mergeAll = F2(
	function (next, list) {
		var _p10 = {ctor: '_Tuple2', _0: next, _1: list};
		_v5_8:
		do {
			if ((_p10.ctor === '_Tuple2') && (_p10._1.ctor === '::')) {
				switch (_p10._0.ctor) {
					case 'Added':
						switch (_p10._1._0.ctor) {
							case 'Added':
								return {
									ctor: '::',
									_0: _abadi199$elm_input_extra$Diff$Added(
										A2(_elm_lang$core$Basics_ops['++'], _p10._0._0, _p10._1._0._0)),
									_1: _p10._1._1
								};
							case 'Removed':
								return {
									ctor: '::',
									_0: A2(_abadi199$elm_input_extra$Diff$Changed, _p10._1._0._0, _p10._0._0),
									_1: _p10._1._1
								};
							case 'Changed':
								return {
									ctor: '::',
									_0: A2(
										_abadi199$elm_input_extra$Diff$Changed,
										_p10._1._0._0,
										A2(_elm_lang$core$Basics_ops['++'], _p10._0._0, _p10._1._0._1)),
									_1: _p10._1._1
								};
							default:
								break _v5_8;
						}
					case 'Removed':
						switch (_p10._1._0.ctor) {
							case 'Removed':
								return {
									ctor: '::',
									_0: _abadi199$elm_input_extra$Diff$Removed(
										A2(_elm_lang$core$Basics_ops['++'], _p10._0._0, _p10._1._0._0)),
									_1: _p10._1._1
								};
							case 'Added':
								return {
									ctor: '::',
									_0: A2(_abadi199$elm_input_extra$Diff$Changed, _p10._0._0, _p10._1._0._0),
									_1: _p10._1._1
								};
							case 'Changed':
								return {
									ctor: '::',
									_0: A2(
										_abadi199$elm_input_extra$Diff$Changed,
										A2(_elm_lang$core$Basics_ops['++'], _p10._0._0, _p10._1._0._0),
										_p10._1._0._1),
									_1: _p10._1._1
								};
							default:
								break _v5_8;
						}
					case 'NoChange':
						if (_p10._1._0.ctor === 'NoChange') {
							return {
								ctor: '::',
								_0: _abadi199$elm_input_extra$Diff$NoChange(
									A2(_elm_lang$core$Basics_ops['++'], _p10._0._0, _p10._1._0._0)),
								_1: _p10._1._1
							};
						} else {
							break _v5_8;
						}
					default:
						if (_p10._1._0.ctor === 'Changed') {
							return {
								ctor: '::',
								_0: A2(
									_abadi199$elm_input_extra$Diff$Changed,
									A2(_elm_lang$core$Basics_ops['++'], _p10._0._0, _p10._1._0._0),
									A2(_elm_lang$core$Basics_ops['++'], _p10._0._1, _p10._1._0._1)),
								_1: _p10._1._1
							};
						} else {
							break _v5_8;
						}
				}
			} else {
				break _v5_8;
			}
		} while(false);
		return {ctor: '::', _0: next, _1: list};
	});
var _abadi199$elm_input_extra$Diff$UseB = {ctor: 'UseB'};
var _abadi199$elm_input_extra$Diff$UseA = {ctor: 'UseA'};
var _abadi199$elm_input_extra$Diff$UseBoth = {ctor: 'UseBoth'};
var _abadi199$elm_input_extra$Diff$choices = F2(
	function (a, b) {
		return _elm_lang$core$Native_Utils.eq(a, b) ? {
			ctor: '::',
			_0: {
				ctor: '_Tuple3',
				_0: _abadi199$elm_input_extra$Diff$UseA,
				_1: 0,
				_2: _abadi199$elm_input_extra$Diff$Removed(a)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple3',
					_0: _abadi199$elm_input_extra$Diff$UseB,
					_1: 0,
					_2: _abadi199$elm_input_extra$Diff$Added(b)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple3',
						_0: _abadi199$elm_input_extra$Diff$UseBoth,
						_1: 1,
						_2: _abadi199$elm_input_extra$Diff$NoChange(a)
					},
					_1: {ctor: '[]'}
				}
			}
		} : {
			ctor: '::',
			_0: {
				ctor: '_Tuple3',
				_0: _abadi199$elm_input_extra$Diff$UseA,
				_1: 0,
				_2: _abadi199$elm_input_extra$Diff$Removed(a)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple3',
					_0: _abadi199$elm_input_extra$Diff$UseB,
					_1: 0,
					_2: _abadi199$elm_input_extra$Diff$Added(b)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple3',
						_0: _abadi199$elm_input_extra$Diff$UseBoth,
						_1: 0,
						_2: A2(_abadi199$elm_input_extra$Diff$Changed, a, b)
					},
					_1: {ctor: '[]'}
				}
			}
		};
	});
var _abadi199$elm_input_extra$Diff$best = F5(
	function (tl, t, l, a, b) {
		return _abadi199$elm_input_extra$Diff$orCrash(
			A3(
				_elm_lang$core$List$foldl,
				_abadi199$elm_input_extra$Diff$bestScore,
				_elm_lang$core$Maybe$Nothing,
				A2(
					_elm_lang$core$List$map,
					A3(_abadi199$elm_input_extra$Diff$scores, tl, t, l),
					A2(_abadi199$elm_input_extra$Diff$choices, a, b))));
	});
var _abadi199$elm_input_extra$Diff$calcCell = F3(
	function (_p12, _p11, s) {
		var _p13 = _p12;
		var _p16 = _p13._0;
		var _p14 = _p11;
		var _p15 = _p14._0;
		return A3(
			_elm_lang$core$Dict$insert,
			{ctor: '_Tuple2', _0: _p16, _1: _p15},
			A5(
				_abadi199$elm_input_extra$Diff$best,
				A3(_abadi199$elm_input_extra$Diff$val, _p16 - 1, _p15 - 1, s),
				A3(_abadi199$elm_input_extra$Diff$val, _p16 - 1, _p15, s),
				A3(_abadi199$elm_input_extra$Diff$val, _p16, _p15 - 1, s),
				_p13._1,
				_p14._1),
			s);
	});
var _abadi199$elm_input_extra$Diff$calcRow = F3(
	function (bs, _p17, d) {
		var _p18 = _p17;
		return A3(
			_elm_lang$core$List$foldl,
			_abadi199$elm_input_extra$Diff$calcCell(
				{ctor: '_Tuple2', _0: _p18._0, _1: _p18._1}),
			d,
			A2(
				_elm_lang$core$List$indexedMap,
				F2(
					function (v0, v1) {
						return {ctor: '_Tuple2', _0: v0, _1: v1};
					}),
				bs));
	});
var _abadi199$elm_input_extra$Diff$initialGrid = F2(
	function (az, bs) {
		return function (d) {
			return A3(
				_elm_lang$core$List$foldl,
				function (a) {
					return A2(
						_abadi199$elm_input_extra$Diff$calcCell,
						a,
						{ctor: '_Tuple2', _0: -1, _1: ''});
				},
				d,
				A2(
					_elm_lang$core$List$indexedMap,
					F2(
						function (v0, v1) {
							return {ctor: '_Tuple2', _0: v0, _1: v1};
						}),
					az));
		}(
			A3(
				_abadi199$elm_input_extra$Diff$calcRow,
				bs,
				{ctor: '_Tuple2', _0: -1, _1: ''},
				A2(
					_elm_lang$core$Dict$singleton,
					{ctor: '_Tuple2', _0: -1, _1: -1},
					{
						ctor: '_Tuple2',
						_0: 0,
						_1: {ctor: '[]'}
					})));
	});
var _abadi199$elm_input_extra$Diff$calcGrid = F2(
	function (az, bs) {
		return A3(
			_elm_lang$core$List$foldl,
			_abadi199$elm_input_extra$Diff$calcRow(bs),
			A2(_abadi199$elm_input_extra$Diff$initialGrid, az, bs),
			A2(
				_elm_lang$core$List$indexedMap,
				F2(
					function (v0, v1) {
						return {ctor: '_Tuple2', _0: v0, _1: v1};
					}),
				az));
	});
var _abadi199$elm_input_extra$Diff$diff = F3(
	function (tokenize, a, b) {
		var bs = tokenize(b);
		var az = tokenize(a);
		return _elm_lang$core$Native_Utils.eq(
			az,
			{ctor: '[]'}) ? A3(
			_elm_lang$core$List$foldr,
			_abadi199$elm_input_extra$Diff$mergeAll,
			{ctor: '[]'},
			A2(_elm_lang$core$List$map, _abadi199$elm_input_extra$Diff$Added, bs)) : (_elm_lang$core$Native_Utils.eq(
			bs,
			{ctor: '[]'}) ? A3(
			_elm_lang$core$List$foldr,
			_abadi199$elm_input_extra$Diff$mergeAll,
			{ctor: '[]'},
			A2(_elm_lang$core$List$map, _abadi199$elm_input_extra$Diff$Removed, az)) : A3(
			_elm_lang$core$List$foldl,
			_abadi199$elm_input_extra$Diff$mergeAll,
			{ctor: '[]'},
			A2(
				_elm_lang$core$Maybe$withDefault,
				{ctor: '[]'},
				A2(
					_elm_lang$core$Maybe$map,
					function (_p19) {
						var _p20 = _p19;
						return _p20._1;
					},
					A2(
						_elm_lang$core$Dict$get,
						{
							ctor: '_Tuple2',
							_0: -1 + _elm_lang$core$List$length(az),
							_1: -1 + _elm_lang$core$List$length(bs)
						},
						A2(_abadi199$elm_input_extra$Diff$calcGrid, az, bs))))));
	});
var _abadi199$elm_input_extra$Diff$diffChars = _abadi199$elm_input_extra$Diff$diff(
	_elm_lang$core$String$split(''));
var _abadi199$elm_input_extra$Diff$diffLines = _abadi199$elm_input_extra$Diff$diff(_abadi199$elm_input_extra$Diff$tokenizeLines);
