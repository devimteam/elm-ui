var _abadi199$elm_input_extra$MaskedInput_Number$processInput = F5(
	function (options, tokens, state, oldValue, value) {
		var oldNumber = _elm_lang$core$Result$toMaybe(
			_elm_lang$core$String$toInt(
				A2(_abadi199$elm_input_extra$MaskedInput_Pattern$extract, tokens, oldValue)));
		var adjustment = function () {
			var _p0 = state;
			_v0_2:
			do {
				if (_p0._0.ctor === 'Just') {
					switch (_p0._0._0) {
						case 8:
							return _abadi199$elm_input_extra$MaskedInput_Pattern$Backspace;
						case 46:
							return _abadi199$elm_input_extra$MaskedInput_Pattern$Delete;
						default:
							break _v0_2;
					}
				} else {
					break _v0_2;
				}
			} while(false);
			return _abadi199$elm_input_extra$MaskedInput_Pattern$OtherUpdate;
		}();
		var newValue = A2(
			_abadi199$elm_input_extra$MaskedInput_Pattern$extract,
			tokens,
			A2(
				_abadi199$elm_input_extra$MaskedInput_Pattern$format,
				tokens,
				A4(_abadi199$elm_input_extra$MaskedInput_Pattern$adjust, tokens, adjustment, oldValue, value)));
		var newNumber = _elm_lang$core$Result$toMaybe(
			_elm_lang$core$String$toInt(newValue));
		var _p1 = {ctor: '_Tuple2', _0: newValue, _1: newNumber};
		_v1_0:
		do {
			if (_p1._1.ctor === 'Just') {
				if (_p1._0 === '') {
					break _v1_0;
				} else {
					return options.onInput(newNumber);
				}
			} else {
				if (_p1._0 === '') {
					break _v1_0;
				} else {
					return options.onInput(oldNumber);
				}
			}
		} while(false);
		return options.onInput(_elm_lang$core$Maybe$Nothing);
	});
var _abadi199$elm_input_extra$MaskedInput_Number$defaultOptions = F2(
	function (onInput, toMsg) {
		return {
			pattern: '',
			inputCharacter: _elm_lang$core$Native_Utils.chr('#'),
			onInput: onInput,
			toMsg: toMsg,
			hasFocus: _elm_lang$core$Maybe$Nothing
		};
	});
var _abadi199$elm_input_extra$MaskedInput_Number$Options = F5(
	function (a, b, c, d, e) {
		return {pattern: a, inputCharacter: b, onInput: c, toMsg: d, hasFocus: e};
	});
var _abadi199$elm_input_extra$MaskedInput_Number$State = function (a) {
	return {ctor: 'State', _0: a};
};
var _abadi199$elm_input_extra$MaskedInput_Number$initialState = _abadi199$elm_input_extra$MaskedInput_Number$State(_elm_lang$core$Maybe$Nothing);
var _abadi199$elm_input_extra$MaskedInput_Number$onKeyDown = F3(
	function (currentFormattedValue, tokens, toMsg) {
		var filterKey = function (event) {
			return _elm_lang$core$Json_Decode$succeed(event.keyCode);
		};
		var decoder = A2(
			_elm_lang$core$Json_Decode$map,
			function (keyCode) {
				return toMsg(
					_abadi199$elm_input_extra$MaskedInput_Number$State(
						_elm_lang$core$Maybe$Just(keyCode)));
			},
			A2(_elm_lang$core$Json_Decode$andThen, filterKey, _abadi199$elm_input_extra$Input_Decoder$eventDecoder));
		var eventOptions = {stopPropagation: false, preventDefault: false};
		return A3(_elm_lang$html$Html_Events$onWithOptions, 'keydown', eventOptions, decoder);
	});
var _abadi199$elm_input_extra$MaskedInput_Number$onKeyPress = F3(
	function (currentFormattedValue, tokens, toMsg) {
		var isNumber = function (keyCode) {
			return (_elm_lang$core$Native_Utils.cmp(keyCode, 48) > -1) && (_elm_lang$core$Native_Utils.cmp(keyCode, 57) < 1);
		};
		var isNumPad = function (keyCode) {
			return (_elm_lang$core$Native_Utils.cmp(keyCode, 96) > -1) && (_elm_lang$core$Native_Utils.cmp(keyCode, 105) < 1);
		};
		var filterKey = function (event) {
			return (event.ctrlKey || event.altKey) ? _elm_lang$core$Json_Decode$fail('modifier key is pressed') : (A2(
				_elm_lang$core$List$any,
				F2(
					function (x, y) {
						return _elm_lang$core$Native_Utils.eq(x, y);
					})(event.keyCode),
				_abadi199$elm_input_extra$Input_KeyCode$allowedKeyCodes) ? _elm_lang$core$Json_Decode$fail('not arrow') : ((isNumber(event.keyCode) || isNumPad(event.keyCode)) ? _elm_lang$core$Json_Decode$fail('numeric') : ((_elm_lang$core$Native_Utils.cmp(
				_elm_lang$core$String$length(currentFormattedValue),
				_elm_lang$core$List$length(tokens)) < 0) ? _elm_lang$core$Json_Decode$fail('accepting more input') : _elm_lang$core$Json_Decode$succeed(event.keyCode))));
		};
		var decoder = A2(
			_elm_lang$core$Json_Decode$map,
			function (keyCode) {
				return toMsg(
					_abadi199$elm_input_extra$MaskedInput_Number$State(
						_elm_lang$core$Maybe$Just(keyCode)));
			},
			A2(_elm_lang$core$Json_Decode$andThen, filterKey, _abadi199$elm_input_extra$Input_Decoder$eventDecoder));
		var eventOptions = {stopPropagation: false, preventDefault: true};
		return A3(_elm_lang$html$Html_Events$onWithOptions, 'keypress', eventOptions, decoder);
	});
var _abadi199$elm_input_extra$MaskedInput_Number$input = F4(
	function (options, attributes, state, currentValue) {
		var onBlurAttribute = A2(
			_elm_lang$core$Maybe$withDefault,
			{ctor: '[]'},
			A2(
				_elm_lang$core$Maybe$map,
				A2(
					_elm_lang$core$Basics$flip,
					F2(
						function (x, y) {
							return {ctor: '::', _0: x, _1: y};
						}),
					{ctor: '[]'}),
				A2(
					_elm_lang$core$Maybe$map,
					_elm_lang$html$Html_Events$onBlur,
					A2(
						_elm_lang$core$Maybe$map,
						function (f) {
							return f(false);
						},
						options.hasFocus))));
		var onFocusAttribute = A2(
			_elm_lang$core$Maybe$withDefault,
			{ctor: '[]'},
			A2(
				_elm_lang$core$Maybe$map,
				A2(
					_elm_lang$core$Basics$flip,
					F2(
						function (x, y) {
							return {ctor: '::', _0: x, _1: y};
						}),
					{ctor: '[]'}),
				A2(
					_elm_lang$core$Maybe$map,
					_elm_lang$html$Html_Events$onFocus,
					A2(
						_elm_lang$core$Maybe$map,
						function (f) {
							return f(true);
						},
						options.hasFocus))));
		var tokens = A2(_abadi199$elm_input_extra$MaskedInput_Pattern$parse, options.inputCharacter, options.pattern);
		var currentFormattedValue = A2(
			_abadi199$elm_input_extra$MaskedInput_Pattern$format,
			tokens,
			A2(
				_elm_lang$core$Maybe$withDefault,
				'',
				A2(_elm_lang$core$Maybe$map, _elm_lang$core$Basics$toString, currentValue)));
		var inputAttributes = A2(
			_elm_lang$core$List$append,
			onBlurAttribute,
			A2(
				_elm_lang$core$List$append,
				onFocusAttribute,
				A2(
					_elm_lang$core$List$append,
					attributes,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$value(currentFormattedValue),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onInput(
								A4(_abadi199$elm_input_extra$MaskedInput_Number$processInput, options, tokens, state, currentFormattedValue)),
							_1: {
								ctor: '::',
								_0: A3(_abadi199$elm_input_extra$MaskedInput_Number$onKeyDown, currentFormattedValue, tokens, options.toMsg),
								_1: {
									ctor: '::',
									_0: A3(_abadi199$elm_input_extra$MaskedInput_Number$onKeyPress, currentFormattedValue, tokens, options.toMsg),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$type_('text'),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					})));
		return A2(
			_elm_lang$html$Html$input,
			inputAttributes,
			{ctor: '[]'});
	});
